## 테스트 시작하기

테스트란?
- 작성된 코드가 의도한 대로 정확하게 동작하는지 확인하는 과정

테스트가 당신의 코드에 미치는 영향
- 사려깊은 설계가 가능해진다.
    · 해당 코드의 API가 잘 설계 되었는지를 시험하는 행위이다.
        ? API란, Application Programming Interface. 응용프로그램에서 사용할 수 있도록 운영체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 의미.
    · 코딩전에 테스트를 작성하다 보면 원하는 기능을 추가하기 위해 무엇이 필요한지 고민해보게 된다.
    · 구현보다 인터페이스에 집중하게 된다는 장점도 있다.
- 자신있게 변경할 수 있고, 디버깅 시간이 줄어들고 빠르게 배포할 수 있다.
    · 테스트를 거친 후 서브밋 되는 코드는 통상적으로 결함이 적다.
- 좋은 문서자료가 된다.
    · 한번에 하나의 행위만 집중해서 검증하는 테스트는 문서와 동일한 역할을 한다.
    · 해당 테스트를 읽음으로서 문서를 읽는 것처럼 해당 기능의 동작을 명확하게 이해할 수 있게 된다.
- 작동하는지 검증하는 시간을 줄여준다.
    · 코드를 검사해주는 테스트가 준비되어 있다면 리뷰단계에서 해당 시간을 아낄 수 있다.

올바른 테스트 작성을 위한 규칙
- 인터페이스를 기준으로 테스트를 작성하자.
    · 외부에 노출되는 public메서드를 기준으로 작성
    · 컴포넌트에 대한 단위/통합테스트의 경우 구현 세부명세를 테스트하기보다는, UI구성 요소를 사용자가 사용하는 방식으로 테스트하는게 좋다.
      (사용자가 앱을 사용하는 방식과 테스트가 유사할수록 테스트의 신뢰성은 향상된다.)
- 커버리지보다는 의미있는 테스트인지 고민하자.
    · 아주 간단한 함수는 다른 모듈이나 컴포넌트의 로직에 포함되어 있을때 한번에 검증하는 것이 효율적
- 테스트 코드도 가독성을 높여야 한다.
    · 명확한 테스트 디스크립션이 있다면 테스트파일만 보고 앱이 어떻게 동작하는지 파악하기 좋음
- 하나의 테스트에서는 가급적 하나의 동작만 검증하는 것이 좋다.
    · 하나의 테스트에서 한번에 검증하는 것이 아니라 여러개로 나누어 검증하는것이 가독성과 유지보수에 좋음

테스트 작성하기
- 일반적인 테스트 작성방식
    · AAA(Arrange-Act-Assert)패턴
    · GWT(Given-When-Then)패턴
    1. 테스트를 위한 환경 만들기
    2. 테스트 동작 재현
    3. 올바른 동작이 실행되었는지 또는 변경사항을 검증하기

